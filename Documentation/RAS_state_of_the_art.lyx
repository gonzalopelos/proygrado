#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "title_page.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Si los robots van a ser introducidos en el mundo de los humanos para asistir
 o ayudar a una persona en la realización de una acción o tarea, dos problemas
 clave de los robots actuales deberán de ser solucionados.
 La interfaz robot-humano deberá ser de uso intuitivo y la seguridad del
 usuario en lo que respecta a heridas infligidas por colisiones deberá estar
 garantizada.
\end_layout

\begin_layout Subsection
Interacción Persona Robot
\end_layout

\begin_layout Standard
ToDo
\end_layout

\begin_layout Subsection
Definiciones
\end_layout

\begin_layout Itemize
Peligro (Hazard): Fuente de daño potencial.
\end_layout

\begin_layout Itemize
Riesgo (Risk):Combinación de la probabilidad de que ocurra un daño por la
 gravedad de ese daño.
\end_layout

\begin_layout Itemize
Seguridad funcional: La seguridad funcional es la parte de la seguridad
 global que depende del funcionamiento correcto del proceso o equipo en
 respuesta a sus entradas.
 La IEC TR 61508-0 proporciona el siguiente ejemplo para ayudar a aclarar
 el significado de la seguridad funcional.
 “Por ejemplo, un dispositivo de protección contra sobre-temperatura que
 utiliza un sensor térmico en los bobinados de un motor eléctrico para desactiva
r el motor antes de que pueda calentarse en exceso, es un caso de seguridad
 funcional.
 Pero proporcionar aislamiento especial para resistir altas temperaturas
 no es un ejemplo de seguridad funcional (aunque es un ejemplo de seguridad
 y podría proteger precisamente contra el mismo peligro)”.
 
\end_layout

\begin_layout Itemize
Colaboración: Trabajo realizado por robots y humanos juntos para cumplir
 una tarea 
\begin_inset CommandInset citation
LatexCommand cite
key "moon2010recent"

\end_inset

.
\end_layout

\begin_layout Itemize
Robot colaborativo: Robot diseñado para la interacción directa con un humano
 
\begin_inset CommandInset citation
LatexCommand cite
key "moon2010recent"

\end_inset

.
\end_layout

\begin_layout Itemize
Field Robot: Robot diseñado para operar en ambientes no restringidos, no
 artificiales, normalmente al aire libre y en toda la gama de condiciones
 operativas y ambientales: un robot para el mundo “natural”
\begin_inset CommandInset citation
LatexCommand cite
key "fieldrobotics"

\end_inset

.
 
\end_layout

\begin_layout Section
Normas y Estándares de Seguridad
\end_layout

\begin_layout Subsection
ISO 10218
\end_layout

\begin_layout Standard
“Robots and robotic devices -- Safety requirements for industrial robots”
 
\begin_inset CommandInset citation
LatexCommand cite
key "ISO10218-1"

\end_inset

: Especifica los requerimientos y directrices para un diseño inherentemente
 seguro, medidas de protección e información para el uso de robots industriales.
 En ella se describen peligros básicos asociados con los robots y proporciona
 los requisitos para eliminar, o reducir de manera adecuada, los riesgos
 asociados a estos peligros.
 Aplica solo a los robots industriales, a pesar de esto los principios de
 seguridad establecidos en la norma se pueden utilizar para otros tipos
 de robots.
\end_layout

\begin_layout Subsection
ISO/TS 15066
\end_layout

\begin_layout Standard
“Robots and robotic devices -- Collaborative robots”: Especifica los requerimien
tos de seguridad para los sistemas de robots industriales colaborativos
 y el ambiente de trabajo, y complementa los requisitos y la orientación
 sobre la operación de robots industriales colaborativos dada por las normas
 ISO 10218-1 e ISO 10218-2.
 Aplica lo mismo que la norma anterior para el caso de robots no industriales,
 es útil aunque no especifica para estos.
\end_layout

\begin_layout Subsection
ISO 13482
\end_layout

\begin_layout Standard
“Robots and robotic devices -- Safety requirements for personal care robots”
 
\begin_inset CommandInset citation
LatexCommand cite
key "safetycertificationpractices"

\end_inset

: Especifica los requerimientos y directrices para un diseño inherentemente
 seguro, medidas de protección e información para el uso de robots para
 el cuidado personal, en particular, los siguientes tres tipos de robots:
 Robot sirviente móvil.
 Robot asistente físico.
 Robot portador de persona.
 Ofrece una categorización de robots basada en sus atributos entre la cual
 se encuentra el tipo 3.2, robots personales móviles de "múltiples pasajeros"
 o "pasajeros no de pie" o "al aire libre" o "superficies irregulares" o
 "no lento" o "no liviano" o " autónomo".
 Este tipo de robots cubriría a los field robots y en particular a los robots
 de este tipo utilizados para la agricultura.
\end_layout

\begin_layout Subsection
ISO 25119
\end_layout

\begin_layout Standard
“Tractors and machinery for agriculture and forestry -- Safety-related parts
 of control systems”: Solo aborda el peligro para los humanos, y no para
 el robot.
 Cubre los posibles peligros causados por el comportamiento funcional de
 los sistemas relacionados con la seguridad, a diferencia de los riesgos
 que surgen de los propios equipos.
 Alcance: Establece los principios generales para el diseño y desarrollo
 de las partes relacionadas con la seguridad de los sistemas de control
 (SRP / CS) en los tractores utilizados en la agricultura y la silvicultura,
 máquinas autopropulsadas de montar y máquinas montadas, semi-montadas y
 arrastradas utilizadas en agricultura.
\end_layout

\begin_layout Subsection
ANSI/RIA R15.06
\end_layout

\begin_layout Standard
“American National Standard for Industrial Robots and Robot Systems- Safety
 Requirements”: El estándar ANSI define disposiciones de consenso para la
 construcción, reconstrucción, modificación, instalación, protección, atención,
 pruebas y puesta en marcha de robots y sistemas de robótica, así como la
 formación de operadores de los sistemas de robot y robótica y personal
 de mantenimiento.
 Es la adopción nacional (Estados Unidos) del estándar ISO 10218-1 y 10218-2.
\end_layout

\begin_layout Subsection
Otras normas
\end_layout

\begin_layout Itemize
ISO 26262 - Seguridad funcional, automotriz.
\end_layout

\begin_layout Itemize
ISO 13854 - Distancias mínimas para evitar aplastamientos.
\end_layout

\begin_layout Itemize
ISO 13855 - Posicionamiento de las protecciones.
\end_layout

\begin_layout Itemize
ISO 13857 - Distancias seguras.
\end_layout

\begin_layout Itemize
ISO 14120 - Protecciones en posición fija o movibles.
\end_layout

\begin_layout Section
Seguridad en Robots Colaborativos
\end_layout

\begin_layout Standard
La seguridad en sistemas robotizados contempla dos vertientes, la que se
 refiere a la seguridad propia del robot que debe ser contemplada desde
 el diseño del mismo y es responsabilidad del fabricante; y aquella que
 está relacionada con el diseño e implantación del sistema, su utilización,
 programación y mantenimiento que requiere de una cuota mayor de responsabilidad
 del usuario del sistema que opera de forma colaborativa con el robot.
\end_layout

\begin_layout Standard
Existen normas (ver Sección 2 de este documento) que proporcionan un marco
 de trabajo a diseñadores y fabricantes de robots de gran ayuda para lograr
 productos más seguros en su uso, por ejemplo presentando estrategias de
 trabajo para el desarrollo y selección de medidas de seguridad que consideran:
\end_layout

\begin_layout Itemize
Determinación de los límites del sistema, intención de uso, espacio y tiempos
 de trabajo considerando:
\end_layout

\begin_deeper
\begin_layout Itemize
Aspectos de interacción con personas.
\end_layout

\begin_layout Itemize
Manipulación de objetos.
\end_layout

\begin_layout Itemize
Transporte de carga.
\end_layout

\begin_layout Itemize
Factores de riesgo ambiental.
\end_layout

\begin_layout Itemize
Tareas de mantenimiento, cómo y cuándo deberán ser llevadas a cabo.
\end_layout

\end_deeper
\begin_layout Itemize
Identificación de todos los peligros que puede generar el robot durante
 todas las fases de trabajo.
 En este punto se deben considerar:
\end_layout

\begin_deeper
\begin_layout Itemize
Fallas de hardware (motores, sensores, fuentes de alimentación).
\end_layout

\begin_layout Itemize
Fallas de software (sistemas de control).
\end_layout

\begin_layout Itemize
Riesgos asociados a un trabajo colaborativo entre el robot y operarios.
\end_layout

\begin_layout Itemize
Riesgos vinculados a un mal uso del robot (error humano, no respetar políticas
 de seguridad, no respetar protocolos).
\end_layout

\end_deeper
\begin_layout Itemize
Se debe definir el riesgo de que se produzca un accidente, esto es calculado
 probabilísticamente en función del daño que pueda producir
\end_layout

\begin_layout Subsection
Diseño y construcción del robot
\end_layout

\begin_layout Standard
En el diseño del robot y de su sistema de control es muy importante considerar
 siempre el posible accidente, tomándose las acciones oportunas para evitarlo
 en la medida de lo posible.
\end_layout

\begin_layout Subsubsection
Diseño Mecánico
\end_layout

\begin_layout Standard
En lo que respecta al diseño mecánico del robot, deberán considerarse las
 siguientes medidas enfocadas en la prevención del posible accidente.
\end_layout

\begin_layout Itemize
Acceso al panel de control principal: El panel de control principal del
 robot debe estar instalado fuera del área de trabajo del mismo.
 Para el caso en el que no hay un espacio de trabajo bien definido deberá
 haber una base de control que esté accesible siempre para los operarios.
\end_layout

\begin_layout Itemize
Paradas de emergencia: Deben existir paradas de emergencia con accionadas
 mediante botones de fácil acceso que deberán estar situados en posiciones
 fácilmente localizables.
 Las identificaciones de estas paradas de emergencia son una parte fundamental
 de la formación del personal.
 Estos dispositivos tienen prioridad sobre todos los demás controles.
\end_layout

\begin_layout Itemize
Identificación de dispositivos de control: Todos los dispositivos de control
 deberán estar claramente identificados y etiquetados indicando su propósito.
 Los controles de accionamiento deben estar diseñados para indicar el estado
 de funcionamiento del robot.
\end_layout

\begin_layout Itemize
Controles de accionamiento o alimentación de energía: Los controles de accionami
ento o alimentación de energía del robot deben estar protegidos contra acciones
 involuntarias.
 Cada robot cuenta con un interruptor independiente que se puede bloquear
 solo en la posición de apagado.
\end_layout

\begin_layout Itemize
Interacción robot-operarios: Se utilizan pantallas para brindar indicaciones
 al usuario de forma de minimizar los errores que éstos pueden cometer,
 así como también para indicar estados del robot.
\end_layout

\begin_layout Itemize
Dispositivos de detección de presencia: Los detectores de presencia que
 se usan más comúnmente en la seguridad de la robótica son esteras de presión
 (colocadas en el suelo) y cortinas de luz (similares a las matrices de
 fotocélulas).
 Estos dispositivos se pueden utilizar para detectar una persona entrar
 en un área peligrosa cerca de un robot.
 Los detectores de proximidad que operan en capacitancia eléctrica, ultrasonido,
 radiofrecuencia, láser, y los principios de televisión están “actualmente”
 en fase de pruebas de fiabilidad en laboratorios de investigación, debido
 a limitaciones reconocidas en su capacidad de detectar la presencia de
 personal en algunos escenarios, por ejemplo en condiciones climáticas variadas
 si es que el robot opera al aire libre.
\end_layout

\begin_layout Itemize
Sistemas de alerta audible y visible: Los sistemas de alertas audibles y
 visibles se pueden utilizar para mejorar la eficacia de los métodos de
 salvaguardia (detectores de proximidad, barreras, etc.).
 Los efectos de las señales audibles y visibles deben ser fácilmente reconocible
s por los operarios.
\end_layout

\begin_layout Itemize
Movilidad segura del robot: El robot debe estar diseñado para que pueda
 ser movido en cualquiera de sus ejes sin la necesidad de utilizar la potencia
 de accionamiento del sistema.
\end_layout

\begin_layout Itemize
Frenos mecánicos adicionales: si el robot maneja grandes cargas, debe contar
 con frenos adicionales que se activen cuando se corte la alimentación de
 los actuadores.
 También se debe disponer de mecanismos para desactivar estos frenos de
 forma manual.
\end_layout

\begin_layout Subsubsection
Diseño de Software
\end_layout

\begin_layout Standard
En lo que respecta al diseño de software del robot, deberán considerarse
 las siguientes medidas enfocadas en la prevención del posible accidente.
\end_layout

\begin_layout Itemize
Se debe proveer la capacidad de parar el sistema automáticamente ante velocidade
s anormales de componentes del robot en el desarrollo de tareas.
\end_layout

\begin_layout Itemize
Técnicas de prevención de colisiones y para minimizar el impacto del accidente.
\end_layout

\begin_deeper
\begin_layout Itemize
Prevención del accidente: Uso de sensores ubicados en puntos estratégicos
 para considerar el volumen del robot y un área virtual de alto riesgo.
 Esto acompañado de algoritmos que permiten tomar decisiones frente a posibles
 colisiones.
 
\begin_inset Newline newline
\end_inset

En algunos casos se utilizan cámaras para reconocer personas y considerar
 los riesgos de la interacción.
\end_layout

\begin_layout Itemize
En caso de accidente: Existen casos en los que una posible colisión no pudo
 ser detectada a tiempo para prevenirla, en tales casos el sistema de control
 deberá estar preparado para actuar de manera de minimizar el impacto (fuerza
 repulsiva, torque).
\end_layout

\end_deeper
\begin_layout Itemize
Códigos de Acceso al Sistema: el acceso a la unidad de control, el arranque,
 parada y modificación del programa, deben estar limitadas mediante el empleo
 de algún mecanismo de seguridad (llaves, códigos de seguridad, etc.).
\end_layout

\begin_layout Itemize
Se debe contemplar mecanismos de recuperación ante fallas, se pueden considerar
 sistemas de control alternativos, backup.
\end_layout

\begin_layout Itemize
El sistema de control debe realizar una continua supervisión del correcto
 funcionamiento de todos los subsistemas y componentes del robot, incluso
 debe supervisar el funcionamiento del propio sistema de control para ello
 existen componentes como el watch-dog.
 
\end_layout

\begin_layout Subsection
Instalación y Explotación
\end_layout

\begin_layout Standard
En el uso del sistema y en especial durante las fases de instalación y puesta
 en marcha deben respetarse rigurosamente determinadas normas que reducirán
 el riesgo de accidente.
 Es importante que los operarios cuenten con información adecuada sobre
 los posibles riesgos y acciones de contingencia.
 Algunos de los puntos más relevantes a tener en cuenta son los siguientes:
\end_layout

\begin_layout Itemize
Se deben considerar rigurosamente todas las especificaciones del fabricante.
\end_layout

\begin_layout Itemize
No permitir que personal no calificado opere con el robot.
\end_layout

\begin_layout Itemize
Instalar mecanismos de seguridad para acceder al sistema del robot (códigos
 de acceso al sistema, etc.).
\end_layout

\begin_layout Itemize
Proporcionar elementos para identificar claramente la zona de trabajo del
 robot y sus movimientos.
 Proporcionar sistemas para controlar al robot fuera de su zona de trabajo
 (por ejemplo para una parada de emergencia).
 
\end_layout

\begin_layout Itemize
Se debe establecer un control periódico de todos los equipos y conexiones
 de seguridad que resultan ser críticos.
 
\end_layout

\begin_layout Itemize
Las señales que indican el movimiento del robot deben ser bien visibles
 y si es posible deberán indicarse en el suelo y paredes.
 Se debe contar con señales luminosas y acústicas que indiquen el correcto
 funcionamiento del robot así como también que llamen la atención cuando
 haya (o aumente el) riesgo de un potencial accidente.
 
\end_layout

\begin_layout Itemize
En el proceso de ajuste o reparación de algún componente se deberán neutralizar
 todos los dispositivos de almacenamiento de energía del robot.
 
\end_layout

\begin_layout Itemize
Sólo los desarrolladores y personal capacitado tienen el control del robot
 cuando éste está en la etapa de aprendizaje.
 
\end_layout

\begin_layout Itemize
Según el estándar ANSI en las etapas de construcción y puesta en marcha
 el robot no puede superar velocidades de 250 mm/s = 0,9 km/h.
 Se deben realizar pruebas progresivas, comenzando por velocidades lentas
 y paso a paso, luego se podrá ejecutar de manera continua y a mayores velocidad
es.
 
\end_layout

\begin_layout Subsubsection
Operarios
\end_layout

\begin_layout Standard
En la fase de instalación y explotación una de las tareas más importantes
 es capacitar a los operarios considerando los siguientes puntos:
\end_layout

\begin_layout Itemize
Deberá existir administradores o supervisores que se encarguen de hacer
 cumplir las políticas de seguridad.
 
\end_layout

\begin_layout Itemize
El personal debe entender la tarea completa para la que está programado
 el robot antes de poder comenzar a operar con él.
 
\end_layout

\begin_layout Itemize
La empresa que opera con robots tiene que dejar por escrito que asegura
 que todo el personal es consciente de ello y está capacitado para cumplir
 con las políticas de seguridad.
 
\end_layout

\begin_layout Itemize
Los operadores del robot reciben una formación adecuada en el reconocimiento
 de riesgos/peligros, del equipo y de procedimientos adecuados para operar
 con el robot.
 
\end_layout

\begin_layout Itemize
Si es necesario capacitar a un operario colaborando con el robot compartiendo
 su espacio de trabajo se debe realizar a velocidades lentas y brindando
 un conocimiento previo de las paradas de emergencia y de los componentes
 que alimentan de energía al robot.
 
\end_layout

\begin_layout Itemize
Las operaciones de programación y mantenimiento sólo podrán ser efectuadas
 por personal especializado.
 
\end_layout

\begin_layout Subsubsection
Ambiente
\end_layout

\begin_layout Standard
El ambiente es uno de los factores que tiene suma importancia en lo que
 respecta a consideraciones en las medidas de seguridad que serán implementadas
 para reducir el riesgo de accidente cuando el robot esté trabajando y sobre
 todo en las interacciones con los operarios.
 A continuación algunos de los puntos más relevantes a tener en cuenta:
 
\end_layout

\begin_layout Itemize
El robot debe estar diseñado para contemplar las condiciones ambientales
 a las que puede estar sometido al momento de realizar las tareas.
 En el caso de estar a la intemperie deberá de considerarse factores de
 humedad, presión atmosférica, lluvia, etc.
 que podrán variar repentinamente en el proceso de ejecución de las tareas
 y el robot deberá estar preparado para actuar de buena forma frente a esas
 eventualidades.
\end_layout

\begin_layout Itemize
Es de vital importancia analizar las posibles condiciones ambientales al
 momento de seleccionar los sensores para el robot de forma de garantizar
 que estos funcionaran correctamente en todas ellas.
 De no ser posible esto se deberá disponer sensores redundantes que puedan
 medir las misma magnitudes físicas en diferentes condiciones y/o técnicas
 de sensor fusion (ver Seccion 3.3.3).
\end_layout

\begin_layout Itemize
En caso de utilizar dispositivos de visualización (cámaras) será de gran
 importancia contemplar los diferentes niveles de iluminación a los que
 estará sometido el robot en el desempeño de sus tareas.
\end_layout

\begin_layout Subsection
Técnicas Utilizadas
\end_layout

\begin_layout Subsubsection
Supervisión de Funciones
\end_layout

\begin_layout Standard
ToDo (ver https://drive.google.com/file/d/0B5b9cF_5KTdQTWstTzJTWFVsMFk/view)
\end_layout

\begin_layout Subsubsection
Recuperación Frente a Fallas
\end_layout

\begin_layout Standard
ToDo
\end_layout

\begin_layout Subsubsection
Prevención de Colisiones
\end_layout

\begin_layout Standard
Las técnicas detalladas a continuación tienen como propósito evitar que
 el robot colisione con humanos, otros robots y el ambiente.
\end_layout

\begin_layout Itemize
3D Sensor Fusion: Fusión en tiempo real de la información provista por múltiples
 sensores de imagen tridimensional (range cameras, stereo vision sensors,
 etc) para crear una representación del espacio a través de una grilla de
 evidencia volumétrica (volumetric evidence grid).
 El espacio es segmentado en fondo, robots y personas.
 Rodeando a cada robot se define una zona de peligro (danger zone) adaptativa
 basada en la posición de robot y trayectoria.
 De forma similar cada persona es rodeada por una zona de seguridad (safety
 zone).
 Una zona de peligro intersectando una zona de seguridad indica que el robot
 y la persona se encuentran muy cerca y que una colisión podría ser inminente.
 En estos casos el robot se detiene o enlentece hasta que la situación se
 resuelve.
 En 
\begin_inset CommandInset citation
LatexCommand cite
key "Rybski_2012_7263"

\end_inset

 se presenta la técnica en detalle y su aplicación para un robot industrial
 en una celda de trabajo.
 En [ver carpeta 20170106 del material, tiene papers de ejemplo de aplicación
 de la técnica para para robots móviles en interiores y exteriores].
 En 
\begin_inset CommandInset citation
LatexCommand cite
key "martin1996robot"

\end_inset

 y 
\begin_inset CommandInset citation
LatexCommand cite
key "Hu:2012:RPO:2415754.2415804"

\end_inset

 se describe en mayor detalle los fundamentos y construcción de evidence/occupan
cy grids.
 En 
\begin_inset CommandInset citation
LatexCommand cite
key "lasota2014toward"

\end_inset

 los autores afirman que esta tecnica es promisoria.
\end_layout

\begin_layout Itemize
Human Action/Motion Prediction: Bajo este título se engloban varias técnicas
 cuyo fin es el de, como su nombre lo describe, dotar a los agentes robóticos
 de la capacidad inferir y predecir los movimientos y acciones humanas.
 Ya sea con el fin de evitar colisiones, asistir en tareas u otros fines.
 Esto implica alguna noción de intención conjunta, en la que ambas partes
 mantienen un conjunto de creencias compartidas sobre el estado del mundo
 y la tarea que está siendo realizada 
\begin_inset CommandInset citation
LatexCommand cite
key "hawkins2013probabilistic"

\end_inset

.
 La habilidad de un agente dado para adaptarse ‘en línea’ con el fin de
 interactuar mejor con otro agente es un muy difícil e importante problema.
 Y este problema se vuelve aún más difícil cuando el agente con el cual
 se debe interactuar es un humano, dado que los humanos aprenden rápido
 y se comportan de forma no determinista 
\begin_inset CommandInset citation
LatexCommand cite
key "COIN:COIN266"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Estrategias de Control de Colisiones
\end_layout

\begin_layout Standard
El fin que se desea alcanzar con las estrategias de control de colisiones
 es el de mitigar el daño causado a humanos y al robot mismo en el caso
 de ocurrir una colisión.
 Cabe destacar que la decisión de que hacer frente a la ocurrencia de una
 colisión puede llegar a ser en extremo compleja, como puede ser en el caso
 de una colisión con un humano en un ambiente exterior y dinámico.
\end_layout

\begin_layout Itemize
Torque Control with Gravity Compensation: ToDo
\end_layout

\begin_layout Subsubsection
Estrategias de Control
\end_layout

\begin_layout Standard
Se presentan algunas estrategias de control orientadas a la seguridad en
 la interacción humano-robot.
\end_layout

\begin_layout Itemize
Kinetostatic Danger Field: Lacevic y Rocco introducen en 
\begin_inset CommandInset citation
LatexCommand cite
key "lacevic2010kinetostatic"

\end_inset

 el concepto de Kinetostatic Danger Field, una cantidad que captura el estado
 completo del robot, su configuracion y velocidad.
 Este método persigue estimar el peligro en la vecindad del robot.
 Se trata de una generalización del enfoque del campo de potenciales, con
 el cual tiene sin embargo dos grandes diferencias; primero, este enfoque
 captura la postura y velocidad del robot, y segundo, la fuente del campo
 de potenciales es el robot mismo en lugar de los sujetos/obstáculos.
 Dada esta similitud con el enfoque del campo de potenciales es posible
 utilizar la cantidad Kinetostatic Danger Field para abordar el problema
 de evitar obstáculos.
\end_layout

\begin_layout Subsubsection
Códigos de Acceso al Sistema
\end_layout

\begin_layout Standard
El acceso a la unidad de control, el arranque, parada y modificación del
 programa, deben estar limitadas mediante el empleo de algún mecanismo de
 seguridad (llaves, códigos de seguridad, etc.) 
\begin_inset CommandInset citation
LatexCommand cite
key "secRobAragon"

\end_inset

.
\end_layout

\begin_layout Section
Evaluación de Placas de E/S
\end_layout

\begin_layout Standard
Se presentan las características y aspectos relevantes de un conjunto de
 placas que se han analizado y podrían ser utilizadas para la implementación
 de un componente del proyecto de grado Aspectos de Seguridad y HRI Aplicados
 en un Robot Agropecuario.
 En particular se desea que la placa seleccionada cumpla con un conjunto
 de requerimientos que detallaremos a continuación:
\end_layout

\begin_layout Itemize
Interfaz con USB.
\end_layout

\begin_layout Itemize
Interfaz de comunicación serial síncrona y asíncrona.
 Soportar I2C.
\end_layout

\begin_layout Itemize
Al menos 6 salidas salidas digitales para direcciones de ruedas (4), freno,
 habilitación, luz de seguridad y bocina.
 
\end_layout

\begin_layout Itemize
Entradas para la senal de los sensores hall.
\end_layout

\begin_layout Itemize
Servicio de Watch-Dog Timer (WDT).
\end_layout

\begin_layout Subsection
Arduino Mega
\end_layout

\begin_layout Standard
Es una placa basada en el microcontrolador ATmega1280, compatible con la
 mayoría de las placas diseñadas para Arduino Duemilanove o Diecimila.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/Arduino mega 2560 r3.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación Técnica
\end_layout

\begin_layout Standard
A continuación se describen los componentes técnicos de la placa y microcontrola
dor.
\end_layout

\begin_layout Itemize
Microcontrolador: ATmega1280 
\begin_inset CommandInset citation
LatexCommand cite
key "ATMEGA1280"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad del reloj: 16 MHz.
\end_layout

\begin_layout Itemize
Arquitectura: Cuenta con una arquitectura avanzada RISC de 8 bits.
\end_layout

\begin_deeper
\begin_layout Itemize
135 Instrucciones de gran alcance, la mayoría ejecuta en un solo ciclo de
 reloj.
\end_layout

\begin_layout Itemize
32 × 8 registros para trabajo de propósito general.
\end_layout

\begin_layout Itemize
Funcionamiento totalmente estático.
\end_layout

\begin_layout Itemize
Hasta 16 MIPS de rendimiento a 16 MHz.
\end_layout

\begin_layout Itemize
Multiplicador de 2 ciclos On-Chip.
\end_layout

\end_deeper
\begin_layout Itemize
Memoria: Tiene 128 KB de memoria flash para almacenar código (de los cuales
 4 KB se utiliza para el bootloader), 8 KB de SRAM y 4KB de EEPROM (que
 puede ser leído y escrito con la biblioteca EEPROM 
\begin_inset CommandInset citation
LatexCommand cite
key "ArduinoEEPROM"

\end_inset

).
\end_layout

\begin_layout Itemize
WDT (Watchdog Timer): El WDT es un temporizador que cuenta ciclos de un
 oscilador de 128kHz particular para el módulo.
 Da una interrupción o restablece el sistema cuando el contador alcanza
 un valor de tiempo de espera determinado.
 En el modo de funcionamiento normal, se requiere que el sistema utilice
 la instrucción WDR (Watchdog Timer Reiniciar) para reiniciar el contador
 antes de que se alcance el valor de tiempo de espera, si el sistema no
 reinicia el contador, se emitirá un reset o alarma de sistema.
 El microcontrolador ATmega1280 cuenta con un WDT que presenta las siguientes
 características:
\end_layout

\begin_deeper
\begin_layout Itemize
Ciclos de un oscilador separado al oscilador del chip.
\end_layout

\begin_layout Itemize
3 modos de funcionamiento.
\end_layout

\begin_deeper
\begin_layout Itemize
Interrupción.
\end_layout

\begin_layout Itemize
Restablecimiento del sistema.
\end_layout

\begin_layout Itemize
Interrupción y restablecimiento del sistema.
\end_layout

\end_deeper
\begin_layout Itemize
Período de tiempo de espera configurable de 16ms a 8s.
\end_layout

\begin_layout Itemize
Fusible para mantener siempre encendido el WDT por hardware en modo de toleranci
a a fallas.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: La placa puede ser alimentada a través de una conexión USB o con
 una fuente de alimentación externa.
 La fuente de alimentación se selecciona automáticamente.
 La energía externa (no USB) puede venir de un adaptador de CA a CC o se
 puede conectar a una batería.
 El adaptador se puede conectar a un enchufe de 2,1 mm de centro-positivo
 en el conector de alimentación de la placa y los potenciales de una batería
 se pueden insertar en los cabezales de pin GND y Vin del conector POWER
 de la placa.
\begin_inset Newline newline
\end_inset

La placa puede funcionar con un suministro externo de 6 a 20 volts, sin
 embargo, si se suministra menos de 7V el pin de 5V puede suministrar menos
 de cinco voltios y la placa puede ser inestable.
 Si se utiliza más de 12V, el regulador de voltaje se puede sobrecalentar
 y dañar la placa.
 El rango recomendado es de 7 a 12 voltios.
\end_layout

\begin_layout Itemize
Entrada y Salida: La placa cuenta con 54 pines digitales que pueden ser
 utilizado tanto de entrada como de salida.
 Algunos de estos pines tienen funciones específicas.
\end_layout

\begin_deeper
\begin_layout Itemize
Serial: Los pines 0, 1, 19, 18, 17, 16, 15, 14 se utilizan para recibir
 (RX) y transmitir datos en serie (TX) TTL.
 Los pines 0 y 1 también están conectados a los pines correspondientes del
 chips Serial FTDI USB-to-TTL.
\end_layout

\begin_layout Itemize
Interrupciones externas: los pines 2,3,18,19,20 y 21 pueden configurarse
 para activar una interrupción en un valor bajo, un flanco ascendente, descenden
te o un cambio de valor.
\end_layout

\begin_layout Itemize
PWM: los pines comprendidos entre los rangos 2 a 13 y 44 a 46 proporcionan
 una salida PWM de 8 bits.
\end_layout

\begin_layout Itemize
SPI: los pines 50, 51, 52 y 53 soportan la comunicación SPI, que, aunque
 proporcionada por el hardware subyacente, actualmente no está incluido
 en el lenguaje de Arduino.
 Los pines SPI también se desglosan en la cabecera ICSP, que es físicamente
 compatible con el Duemilanove y Diecimila.
\end_layout

\begin_layout Itemize
LED: el pin 13 está conectado a un LED incorporado a la placa.
 Cuando el valor en ese pin es ALTO el LED está encendido y cuando el valor
 es BAJO está apagado.
\end_layout

\begin_layout Itemize
I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C: los pines 20 y 21 brindan soporte a la comunicación I2C (TWI) utilizando
 Wire Library 
\begin_inset CommandInset citation
LatexCommand cite
key "WIRELibrary"

\end_inset

.
\end_layout

\begin_layout Standard
La placa también cuenta con 16 pines de entradas analógicas, cada una de
 las cuales proporcionan 10 bits de resolución (1.024 valores diferentes).
\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
Es posible desarrollar utilizando el software (IDE) de Arduino 
\begin_inset CommandInset citation
LatexCommand cite
key "ArduinoIDE"

\end_inset

 para facilitar la escritura del código y la actualización de este en la
 placa.
 El entorno de desarrollo de Arduino está desarrollado en Java respetando
 las políticas Open Source y puede ejecutar en las plataformas Mac OS X,
 Linux y Windows.
 Adicionalmente a las estructuras, variables, constantes, y funciones que
 vienen en la placa detalladas en 
\begin_inset CommandInset citation
LatexCommand cite
key "ArduinoLangRef"

\end_inset

 es posible incorporar nuevas librerías que proporcionan funcionalidad adicional
 en el uso de programas (sketches en terminología Arduino) para, por ejemplo,
 trabajar con hardware o manipular datos.
 El IDE de Arduino cuenta con una componente para importar librerías 
\begin_inset CommandInset citation
LatexCommand cite
key "ArduinoLibs"

\end_inset

.
 Las librerías están escritas en C/C++ y como se describe en 
\begin_inset CommandInset citation
LatexCommand cite
key "ArduinoWriteLib"

\end_inset

 es posible escribir librerías propias.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
La placa Arduino Mega no se encuentra disponible en la tienda de Arduino,
 en su lugar se comercializa la placa Arduino Mega 2560 que es una actualización
 de la anterior.
 La placa Arduino Mega 2560 actualiza respecto a su antecesora:
\end_layout

\begin_layout Itemize
Incorpora 128KB de memoria flash.
\end_layout

\begin_layout Itemize
Está basada en el microcontrolador ATmega2560 con similares características
 al del controlador ATmega1280.
\end_layout

\begin_layout Itemize
Suplanta el chip convertidor de USB a serial FTDI y en su cuenta con el
 ATmega16U2 programado como un convertidor de USB a serie.
\end_layout

\begin_layout Standard
El precio de la placa Arduino Mega 2560 es de USD 45 + impuestos en Amazon
 (Estados unidos).
\end_layout

\begin_layout Subsection
MBED LPC1768
\end_layout

\begin_layout Standard
El mbed NXP LPC1768 está diseñado para la creación de prototipos de todo
 tipo de dispositivos, sobre todo las que incluyen Ethernet, USB y la flexibilid
ad de un conjunto amplio de interfaces de periféricos y de una buena cantidad
 de memoria FLASH.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/LPC1768_enabled3.JPG.250x250_q85.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación Técnica
\end_layout

\begin_layout Standard
A continuación se describen los componentes técnicos de la placa y microcontrola
dor.
\end_layout

\begin_layout Itemize
Microcontrolador: mbed NXP LPC1768 
\begin_inset CommandInset citation
LatexCommand cite
key "LPC1769"

\end_inset

 basado en el procesador ARM ® Cortex®-M3 
\begin_inset CommandInset citation
LatexCommand cite
key "CortexM3"

\end_inset

 que se promociona como líder en la industria para aplicaciones en tiempo
 real altamente deterministas, desarrollado específicamente para permitir
 desarrollar plataformas de bajo costo y de alto rendimiento para una amplia
 gama de dispositivos.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad de reloj: 96MHz
\end_layout

\begin_layout Itemize
Arquitectura: El ARM Cortex-M3 es un microprocesador de 32 bits que ofrece
 alto rendimiento y muy bajo consumo de energía.
 Ofrece un conjunto de instrucciones Thumb-2 de baja latencia de interrupción,
 división de hardware, múltiples instrucciones interrumpibles/continuables
 de carga y almacenamiento, interrupciones con estado salvado y restaurado
 automático.
 Se emplean técnicas de canalización para que todas las partes de los sistemas
 de procesamiento y de memoria pueden funcionar de forma continua.
 La ARM Cortex-M3 incluye tres buses AHB-Lite:
\end_layout

\begin_deeper
\begin_layout Enumerate
Bus del sistema.
\end_layout

\begin_layout Enumerate
Bus de I-código
\end_layout

\begin_layout Enumerate
Bus D-código
\end_layout

\begin_layout Standard
Los buses I-código y D-código centrales son más rápidos que el bus de sistema
 y se utilizan teniendo un bus dedicado para la instrucción fetch (I-código)
 y un bus para el acceso a datos (D-código).
 El uso de dos buses de núcleo permite operaciones simultáneas si las operacione
s concurrentes aplican a diferentes dispositivos.
\end_layout

\end_deeper
\begin_layout Itemize
Memoria: Cuenta con 512KB de memoria flash en el chip y un acelerador en
 el puerto que maximiza la performance en el uso con los puertos rápidos
 AHB-Lite.
 El LPC1768 contiene un total de 64 kB RAM estática (SRAM), eso incluye
 a la SRAM principal de 32 kB, accesible por la CPU y el controlador de
 DMA en un bus de alta velocidad, y dos bloques de 16 KB de SRAM cada uno
 situados en un puerto esclavo separado en la matriz multicapa AHB.
 Esta arquitectura permite al CPU y DMA acceso separado sobre tres RAMs
 diferentes que pueden acceder de forma simultánea.
 También cuenta con 4KB de EEPROM.
\end_layout

\begin_layout Itemize
WDT (Watchdog Timer): El módulo WDT presenta las siguientes características:
\end_layout

\begin_deeper
\begin_layout Itemize
Modo de depuración.
\end_layout

\begin_layout Itemize
Habilitado por software pero requiere un restablecimiento por hardware o
 una interrupción específica para deshabilitarlo.
\end_layout

\begin_layout Itemize
Una secuencia de alimentación incorrecta o incompleta provoca una interrupción
 o restablecimiento si el WDT está activo.
\end_layout

\begin_layout Itemize
Bandera para indicar un reinicio del watchdog.
\end_layout

\begin_layout Itemize
Períodos de tiempo configurables.
\end_layout

\begin_layout Itemize
El reloj del Watchdog (WDCLK) puede ser seleccionado de osciladores internos
 (IRC), del oscilador de RTC, o del reloj periférico APB.
 Esto da una amplia gama de posibles opciones de sincronización de la operación
 watchdog en diferentes condiciones de reducción de potencia.
 También proporciona la capacidad de ejecutar el WDT desde una fuente totalmente
 interna que no depende de un cristal externo para una mayor fiabilidad.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: La placa puede ser alimentada a través de una conexión USB o con
 una fuente de alimentación externa, obteniendo 5V por la conexión USB y
 soportando de 4.5V a 9V por medio de una fuente de alimentación externa.
\end_layout

\begin_layout Itemize
Entrada y salida: La placa cuenta con 40 pines de 0.1 pulgadas.
 El siguiente esquema muestra la distribución de los mismos junto con las
 características particulares de cada uno.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/LPC1768_pinout.png
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Como se puede ver en la imagen la placa cuenta con pines que presentan caracterí
sticas particulares, es de interés mencionar los siguientes:
\end_layout

\begin_layout Itemize
Entradas analógicas: la placa cuenta con 6 pines (p15-p20) para entradas
 analógicas de 12 bits de resolución.
\end_layout

\begin_layout Itemize
Serial: los pines 9, 10, 13, 14, 27, 28 se utilizan para recibir (RX) y
 transmitir datos en serie (TX) TTL.
\end_layout

\begin_layout Itemize
PWM: los pines comprendidos entre el rango p21-p26 proporcionan salidas
 PWM.
\end_layout

\begin_layout Itemize
SPI: los pines 5, 6, 7, 11, 12 y 13 soportan la comunicación SPI.
\end_layout

\begin_layout Itemize
I2C: los pines 9, 10, 27 y 28 brindan soporte a la comunicación I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C.
\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
La companía mbed ofrece un conjunto de herramientas online para desarrolladores
 que facilitan el uso y programación de sus productos.
 En el sitio web 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTools"

\end_inset

 se encuentra información sobre cómo desarrollar utilizando productos mbed
 así como también apoyo técnico de una comunidad que promueve el trabajo
 en conjunto, pudiendo intercambiar código o respondiendo a preguntas para
 brindar soluciones a problemas.
 También se puede acceder a un entorno de desarrollo (IDE) online de C/C++
 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedCompiler"

\end_inset

 que está diseñado para poder escribir programas, compilarlos y descargarlos
 para ejecutarlos en el microcontrolador mbed de forma simple y ágil.
 Cabe mencionar que también es posible escribir el código del programa en
 un editor particular y generar el binario a ejecutar con GCC por ejemplo.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
El producto se puede adquirir a través de varios distribuidores recomendados
 por el fabricante 
\begin_inset CommandInset citation
LatexCommand cite
key "LPC1768Order"

\end_inset

 y el precio es de USD 49.
\end_layout

\begin_layout Subsection
USB IO BOARD
\end_layout

\begin_layout Standard
Este es un producto de la serie ODROID de la empresa surcoreana Hardkernel,
 dedicada al open hardware.
 Según se indica en 
\begin_inset CommandInset citation
LatexCommand cite
key "USBIOBOARDWiki"

\end_inset

 es una placa de expansión de IO a USB que provee interfaces GPIO, PWM,
 SPI, UART, I2C y ADC.
 Utiliza el microcontrolador USB PIC18F45K50-QFN compatible con 3.3V/5V.
 Incluye una cabecera de 28 pines que hacen que sea simple de conectar con
 otra breadbord o circuito.
 Tiene un bootloader para descargar/cargar el firmware.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/USBIOBOARD.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación Técnica
\end_layout

\begin_layout Standard
A continuación se describen los componentes técnicos de la placa y microcontrola
dor.
\end_layout

\begin_layout Itemize
Microcontrolador: PIC18F45K50-QFN de 8 bits de la empresa Microchip 
\begin_inset CommandInset citation
LatexCommand cite
key "PIC18F45K50"

\end_inset

, líderes del mercado de microcontroladores 
\begin_inset CommandInset citation
LatexCommand cite
key "MicrochipWiki"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad de reloj: Entre 31Khz y 48Mhz, configurable según necesidad.
 Esta configuración tiene impacto en el consumo de energía.
\end_layout

\begin_layout Itemize
Arquitectura: Microcontrolador de la familia PIC18 de 8 bits, arquitectura
 Harvard modificada.
 Las instrucciones tienen un largo de 16 bits, se puede ver el set de instruccio
nes en 
\begin_inset CommandInset citation
LatexCommand cite
key "PICInstructionSet"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
77 Instrucciones divididas en 4 grupos:
\end_layout

\begin_deeper
\begin_layout Itemize
31 instrucciones orientadas a bytes que manipulan registros.
\end_layout

\begin_layout Itemize
5 instrucciones orientadas a bits que manipulación registros.
\end_layout

\begin_layout Itemize
23 instrucciones de control.
\end_layout

\begin_layout Itemize
10 instrucciones que manipulan inmediatos.
\end_layout

\begin_layout Itemize
8 instrucciones leer/escribir entre la memoria de datos y programa.
\end_layout

\end_deeper
\begin_layout Itemize
Hasta 12 MIPS de rendimiento a 48Mhz.
\end_layout

\end_deeper
\begin_layout Itemize
Memoria: 
\end_layout

\begin_deeper
\begin_layout Itemize
Memoria de programa: 32KB Flash.
\end_layout

\begin_layout Itemize
Memoria de datos: 2KB SRAM y 256 bytes EEPROM.
\end_layout

\end_deeper
\begin_layout Itemize
WDT (Watchdog Timer): El módulo WDT presenta las siguientes características:
\end_layout

\begin_deeper
\begin_layout Itemize
Impulsado por el oscilador interno INTRC (31 Khz)
\end_layout

\begin_layout Itemize
Período nominal de 4ms.
\end_layout

\begin_layout Itemize
Utilizando un postscaler cuyas salidas pueden ser seleccionadas por un multiplex
or el período puede ser configurado entre 4ms y 131,072s (2,18m).
\end_layout

\begin_layout Itemize
El WDT y el postscaler serán restablecidos durante estos eventos:
\end_layout

\begin_deeper
\begin_layout Itemize
Se ejecuta la instrucción SLEEP.
\end_layout

\begin_layout Itemize
Se ejecuta la instrucción CLRWDT.
\end_layout

\begin_layout Itemize
Los bits IRCF del registro OSCCON son cambiados.
\end_layout

\begin_layout Itemize
Ha ocurrido una falla de reloj.
\end_layout

\end_deeper
\begin_layout Itemize
Diagrama de bloques del WDT 
\begin_inset CommandInset citation
LatexCommand cite
key "PIC18F45K50"

\end_inset

:
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/USBIOBOARD_WDT.PNG
	width 50line%
	groupId imgs

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: La placa puede ser alimentada a través de una conexión USB o con
 una fuente de alimentación externa, el rango de operación es entre 3.3V
 y 5V.
 El microcontrolador posee varias opciones para la gestión de la energía,
 esto permite su funcionamiento con un consumo de energía extremadamente
 bajo.
\end_layout

\begin_layout Itemize
Entrada y salida: La placa cuenta con 2 cabeceras de 14 pines cada una,
 adicionalmente cuenta con una cabecera de 5 pines que puede ser utilizada
 para debug o actualización del boot loader, todos los pins son de 0,1 pulgadas.
 El siguiente esquema muestra la distribución de los mismos:
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/USBIOBOARD_pinout.png
	width 50line%
	groupId imgs

\end_inset


\begin_inset Newline newline
\end_inset

Como se puede ver en la imagen la placa cuenta con pines que presentan caracterí
sticas particulares, es de interés mencionar los siguientes:
\end_layout

\begin_deeper
\begin_layout Itemize
Entradas/Salidas digitales: Todos los pines menos VDD, GND y 3V3.
\end_layout

\begin_layout Itemize
Entradas analógicas: 25 canales (AN01 - AN25).
\end_layout

\begin_layout Itemize
Salidas analógicas: Cuenta con un módulo DAC con 32 niveles de voltaje de
 salida seleccionables dependiendo de la configuración de los bits DACR<4:0>
 del registro VREFCON2.
 La fórmula para determinar el voltaje de salida se puede ver en la sección
 23.0 de 
\begin_inset CommandInset citation
LatexCommand cite
key "PIC18F45K50"

\end_inset

.
\end_layout

\begin_layout Itemize
Serial: 
\end_layout

\begin_deeper
\begin_layout Itemize
Asíncrona/Síncrona (módulo EUSART): Los pines RX/DT y TX/CK se utilizan
 para recibir y transmitir datos en serie.
\end_layout

\begin_layout Itemize
Sólo Síncrona (módulo MSSP): 
\end_layout

\begin_deeper
\begin_layout Itemize
SPI: utilizando los pines SDO, SDI y SCK.
\end_layout

\begin_layout Itemize
I2C: utilizando los pines SDA y SCL.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
PWM: Pins P1B, P1C, P1D, FLT0, CCP2.
\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
Microchip provee un cross compiler para este PIC en 
\begin_inset CommandInset citation
LatexCommand cite
key "PIC18CCompiler"

\end_inset

 así como el IDE de desarrollo MPLAB X en 
\begin_inset CommandInset citation
LatexCommand cite
key "MPLABIDE"

\end_inset

.
 Adicionalmente en 
\begin_inset CommandInset citation
LatexCommand cite
key "USBIOBOARDWiki"

\end_inset

, la wiki de la placa, se encuentran ejemplos de firmware y de como actualizarlo.
 En el foro de ODROID para este producto, 
\begin_inset CommandInset citation
LatexCommand cite
key "USBIOBOARDForum"

\end_inset

, se puede encontrar bastante referencia con respecto a cómo interactuar
 con la placa, se proveen muchos ejemplos y código para acceder a la placa
 tanto en C como en Python.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
Es posible comprar esta placa en la tienda de ODROID o en la tienda AmeriDroid
 a un precio de USD 15 
\begin_inset CommandInset citation
LatexCommand cite
key "USBIOBOARDStore"

\end_inset

 y 
\begin_inset CommandInset citation
LatexCommand cite
key "Ameridroid"

\end_inset

.
\end_layout

\begin_layout Subsection
FRDM-K64F
\end_layout

\begin_layout Standard
La placa FROM-K64F 
\begin_inset CommandInset citation
LatexCommand cite
key "K64F"

\end_inset

 ha sido diseñado por Freescale en colaboración con mbed para prototipos
 de todo tipo dispositivos.
 Se basa en el Freescale K64F, con un núcleo ARM Cortex-M4F de 32 bits que
 funciona a 120MHz de frecuencia.
 Incluye 1MB de memoria FLASH, 256 KB de RAM y varias interfaces como ser
 Ethernet, SPI, I2C, ADC, DAC, PWM, UART.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/FRDM-K64F_400x300_WO6GnVU.png.250x250_q85.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación técnica
\end_layout

\begin_layout Standard
A continuación se describen los componentes técnicos de la placa y microcontrola
dor.
\end_layout

\begin_layout Itemize
Microcontrolador: Freescale K64F Kinetis K64 MCU 
\begin_inset CommandInset citation
LatexCommand cite
key "K64FDatasheet"

\end_inset

 basado en el proces ador ARM® Cortex™-M4 
\begin_inset CommandInset citation
LatexCommand cite
key "CortexM4"

\end_inset

 diseñado para procesar señales con gran eficiencia y bajo consumo de energía.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad del reloj: 120MHz.
\end_layout

\begin_layout Itemize
Arquitectura: El ARM® Cortex®-M4 es uno de los miembros más reciente de
 procesadores de la serie Cortex-M de ARM dirigidos a núcleos microprocesadores
 basados en bajo costo, ambientes con impulsados por interrupciones, determinist
as.
 El procesador Cortex M4 se basa en la arquitectura ARMv7 y Thumb®-2 ISA
 y es compatible con las arquitecturas de Cortex M3, Cortex M1 y Cortex
 M0; proporciona instrucciones de 32 bits con SIMD (single instruction multiple
 data) estilo DSP.
\end_layout

\begin_layout Itemize
Memoria: Cuenta con 1MB de memoria flash en el chip y 256 KB RAM estática
 (SRAM).
 De EEPROM 32KB.
\end_layout

\begin_layout Itemize
WDT (Watchdog Timer): Cuenta con un monitor externo de Watchdog (EMW) y
 un componente de software para el módulo con los siguientes modos de operación:
\end_layout

\begin_deeper
\begin_layout Itemize
Modo de Parada: Cuando el componente funciona en este modo y los servicios
 del CPU no invocan al componente EMW.
 Al entrar al modo de Parada se congelan los contadores del EMW y las únicas
 formas posibles de salir de dicho modos son, restableciendo el sistema
 o generando una interrupción.
\end_layout

\begin_layout Itemize
Modo espera: Se genera una interrupción que es manejada por el propio componente
 que podrá esperar por otros módulos.
 Modo debug.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: La placa puede ser alimentada a través de una conexión USB o con
 una fuente de alimentación externa, obteniendo 5V por la conexión USB y
 soportando de 4.5V a 9V por medio de una fuente de alimentación externa.
 La salida VOUT a los periféricos de energía es regulada a 3.3v y los pines
 de entrada/salida digitales son de 3.3v y 4mA cada uno.
\end_layout

\begin_layout Itemize
Entrada y salida: La placa cuenta con 86 pines de 0.1 pulgadas.
 Los siguientes esquemas muestran la distribución de los mismos junto con
 las características particulares de cada uno.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/frdm_k64f_reve4_header_pinout.jpg
	width 50line%
	groupId imgs

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/frdm-k64f_peripherals.png
	width 50line%
	groupId imgs

\end_inset


\begin_inset Newline newline
\end_inset

Como se puede ver en la imagen la placa cuenta con pines que presentan caracterí
sticas particulares, es de interés mencionar los siguientes:
\end_layout

\begin_deeper
\begin_layout Itemize
Entradas analógicas: la placa cuenta con 6 pines (PTB2, PTB3, PTB10, PTB11,
 PTC10, PTC11) para entradas analógicas de 12 bits de resolución.
\end_layout

\begin_layout Itemize
Serial: los pines comprendidos entre PTC14-PTC17 se utilizan para recibir
 (RX) y transmitir datos en serie (TX) TTL.
\end_layout

\begin_layout Itemize
PWM: los pines {PTC10, PTC11, PTD0, PTD1, PTD2, PTD3, PTC0, PTC2, PTC3,
 PTC4, PTA1, PTA2} proporcionan salidas PWM.
\end_layout

\begin_layout Itemize
SPI: los pines comprendidos entre PTD1-PTD3 soportan la comunicación SPI.
\end_layout

\begin_layout Itemize
I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C: los pines PTE24 y PTE25 brindan soporte a la comunicación I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C.
\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
Dado que esta placa es un producto habilitado por mbed goza del HDK y SDK
 proporcionado por la compañía ya descrito en la sección 4.2.2 de este documento.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
El producto se puede adquirir a través de distribuidores 
\begin_inset CommandInset citation
LatexCommand cite
key "K64FAmazon"

\end_inset

 que facilitan el acceso desde Uruguay y el precio es de USD 58 más impuestos.
\end_layout

\begin_layout Subsection
LeoLivre
\end_layout

\begin_layout Standard
La placa LeoLivre 1.2 fue concebida para ser utilizada en el ámbito de la
 robótica educacional y se diseñó tomando como inspiración tres placas preexiste
ntes, la Arduino Leonardo 
\begin_inset CommandInset citation
LatexCommand cite
key "ArduinoLeonardo"

\end_inset

, la USB4Butia 
\begin_inset CommandInset citation
LatexCommand cite
key "USB4Butia"

\end_inset

 y la vinciDuino 
\begin_inset CommandInset citation
LatexCommand cite
key "VinciDuino"

\end_inset

.
 Es una placa de dimensiones pequeñas que posee grandes funcionalidades
 con la cual es posible explorar el mundo de la robótica.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/LeoLivre.PNG
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación técnica
\end_layout

\begin_layout Standard
Al construir la LeoLivre se tomó de la Arduino Leonardo su microcontrolador
 y de la USB4Butía la conexión con periféricos vía RJ45.
 A continuación se describen los componentes técnicos de la placa y microcontrol
ador.
\end_layout

\begin_layout Itemize
Microcontrolador: Microcontrolador de 8 bits ATmega32u4 de la empresa Atmel
 
\begin_inset CommandInset citation
LatexCommand cite
key "ATmega32U4"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad del reloj: 16 MHz.
\end_layout

\begin_layout Itemize
Arquitectura: Harvard modificada RISC de 8 bits.
 Cuenta con un set de 135 instrucciones, la mayoría ejecuta en un único
 ciclo de reloj.
\end_layout

\begin_layout Itemize
Memoria:
\end_layout

\begin_deeper
\begin_layout Itemize
Memoria de programa: 32KB Flash.
\end_layout

\begin_layout Itemize
Memoria de datos: 2.5KB SRAM y 1024 bytes EEPROM.
\end_layout

\end_deeper
\begin_layout Itemize
WDT (Watchdog Timer): El módulo WDT presenta las siguientes características:
\end_layout

\begin_deeper
\begin_layout Itemize
Impulsado por un oscilador independiente de 128 Khz.
\end_layout

\begin_layout Itemize
Timeout configurable dentro del rango de los 16ms y los 8s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: La placa puede ser alimentada a través de una conexión USB o con
 una fuente de alimentación externa, el rango de operación es entre 2.7V
 y 5.5V.
\end_layout

\begin_layout Itemize
Entrada y salida: La placa cuenta con 20 pines digitales y 6 pines de comunicaci
ón analógica y 4 conectores RJ45 para comunicación instantánea con periféricos
 que son reconocidos reconocidos rápidamente por la IDE.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/LeoLivre_pinout.PNG
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Entradas analógicas: 6 canales de 10bits.
\end_layout

\begin_layout Itemize
Serial: Cuenta con un puerto de comunicación serial.
\end_layout

\begin_layout Itemize
SPI: Cuenta con bus SPI.
\end_layout

\begin_layout Itemize
PWM: 7 de los pines digitales pueden ser utilizados para PWM.
\end_layout

\begin_layout Itemize
I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C: Cuenta con 1 bus I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C.
\end_layout

\begin_layout Itemize
JTAG: Tiene este bus para debug.
\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
Dado que esta placa es un producto híbrido cuyas principales inspiraciones
 son la Arduino Leonardo y la USB4Butia es posible desarrollar en ella utilizand
o el Eclipse, Arduino IDE y turtlebots 
\begin_inset CommandInset citation
LatexCommand cite
key "LeoLivreCPBR7"

\end_inset

.
 Es posible desarrollar en C/C++ y compilar con avr-gcc.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
La placa debe ser construida ya que es un proyecto abierto, los componentes
 tienen un precio accesible y se consiguen en el mercado.
 Se estima que su costo de construcción ronda los US$20.
\end_layout

\begin_layout Subsection
USB4Butia
\end_layout

\begin_layout Standard
Es una interfaz de entrada/salida USB, derivada de la USB4All, y está especializ
ada en el uso con el robot butiá 2.0 intentando simplificar su uso y aumentar
 su capacidad sensorial, además de actuar de manera robusta.
 Se busca que el diseño de la placa sea abierto y que la construcción pueda
 ser realizada manualmente, facibilitando así la accesibilidad.
 
\begin_inset CommandInset citation
LatexCommand cite
key "USB4ButiaWiki"

\end_inset

 Su objetivos principales es ser económica, con componentes de facil acceso
 en el mercado local.
 También tener puertos conectores para dispositivos que soporten plug and
 play, bus para motors AX12, PWM para manejar de servomotores y pines para
 acceder al bajo nivel 
\begin_inset CommandInset citation
LatexCommand cite
key "USB4ButiaHackpoints"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/USB4butia.png.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación Técnica
\end_layout

\begin_layout Standard
A continuación se describen los componentes técnicos de la placa y microcontrola
dor.
\end_layout

\begin_layout Itemize
Microcontrolador: Microcontrolador de 8 bit PIC18F4550 de la empresa Microchip
 
\begin_inset CommandInset citation
LatexCommand cite
key "PIC18F4550"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad del reloj: 48 MHz
\end_layout

\begin_layout Itemize
Arquitectura: Arquitectura RISC avanzada Harvard de 8 bits.
 Tiene un set de 77 instrucciones.
 
\end_layout

\begin_layout Itemize
Memoria:
\end_layout

\begin_deeper
\begin_layout Itemize
Memoria de programa: 32KB Flash
\end_layout

\begin_layout Itemize
Memoria de datos: 2KB SRAM y 256 bytes EEPROM.
\end_layout

\end_deeper
\begin_layout Itemize
WDT (Watchdog Timer): Presenta la siguientes características:
\end_layout

\begin_deeper
\begin_layout Itemize
Timeout configurable dentro del rango de los 41ms y los 131s.
\end_layout

\begin_layout Itemize
Impulsado por un oscilador interno y compartido de 31 Khz.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: Puede ser alimentada a través del conector USB B y puede operar
 entre 2v a 5.5v.
\end_layout

\begin_layout Itemize
Entrada y salida: La placa cuenta con 6 puertos RJ45 de entrada salida para
 conectar sensores y actuadores analogicos.
 Por otro lado cuenta con 8 pines digitales de entrada/salida para uso general.
\end_layout

\begin_deeper
\begin_layout Itemize
Serial: Cuenta con un puerto de comunicación serial.
\end_layout

\begin_layout Itemize
SPI: Cuenta con bus SPI.
\end_layout

\begin_layout Itemize
PWM: Tiene 2 modulos, uno de ellos mejorado.
\end_layout

\begin_layout Itemize
I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C: Cuenta con 1 bus I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C.
\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
Es posible desarrollar en ella utilizando el Eclipse como IDE y turtlebots.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
La placas se construye manualmente porque es un proyecto abierto.
 Se propone un diseño de la misma, pero solo a modo de sugerencia.
 Los componentes se encuentran en el mercado local y son económicos.
 El costo de todos los componentes necesarios ronda los US$15.
\end_layout

\begin_layout Subsection
ODROID-SHOW
\end_layout

\begin_layout Standard
Otro producto de la serie ODROID de la empresa surcoreana Hardkernel, dedicada
 al open hardware.
 Según se indica en 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowWiki"

\end_inset

 es una placa compatible con Arduino cuyo propósito principal es mostrar
 información sobre el estado interno, de una PC o SBC a la que esté conectada
 vía USB, y para esto cuenta con una pantalla TFT LCD de 2.2”.
 De todas formas ofrece posibilidades de extensión proveyendo interfaz GPIO,
 I2C y ADC.
 Diseñada, considerando sus dimensiones, para ser apilada sobre la ODROID
 U3 utiliza el microcontrolador ATmega328 compatible con 3.7V/5.5V.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Placas Proyecto - Imagenes/ODROIDSHOW.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_layout Subsubsection
Especificación Técnica
\end_layout

\begin_layout Standard
A continuación se describen los componentes técnicos de la placa y microcontrola
dor extraída de 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowWiki"

\end_inset

 y 
\begin_inset CommandInset citation
LatexCommand cite
key "ATmega328DataSheet"

\end_inset

.
\end_layout

\begin_layout Itemize
Microcontrolador: Microcontrolador de 8 bits ATmega328 de la empresa ATMel
 
\begin_inset CommandInset citation
LatexCommand cite
key "ATmega328"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Velocidad de reloj: Hasta 20 MHz.
\end_layout

\begin_layout Itemize
Arquitectura: Harvard modificada RISC de 8 bits.
 Cuenta con un set de 131 instrucciones, la mayoría ejecuta en un único
 ciclo de reloj.
\end_layout

\begin_layout Itemize
Memoria: 
\end_layout

\begin_deeper
\begin_layout Itemize
Memoria de programa: 32KB Flash.
\end_layout

\begin_layout Itemize
Memoria de datos: 2KB SRAM y 1024 bytes EEPROM.
\end_layout

\end_deeper
\begin_layout Itemize
WDT (Watchdog Timer): El módulo WDT presenta las siguientes características:
\end_layout

\begin_deeper
\begin_layout Itemize
Impulsado por un oscilador independiente de 128 Khz.
\end_layout

\begin_layout Itemize
Período nominal de 16ms.
\end_layout

\begin_layout Itemize
Puede ser configurado entre 16ms y 8s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Energía: La placa puede ser alimentada a través de una conexión USB o con
 una fuente de alimentación externa, el rango de operación es entre 3.7V
 y 5.5V.
\end_layout

\begin_layout Itemize
Entrada y salida: La placa cuenta con 1 cabeceras de 6 pines para IO:
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/ODROIDSHOW_boarddetail.jpg
	width 50line%
	groupId imgs

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Entradas/Salidas digitales: Todos los 6 pines.
\end_layout

\begin_layout Itemize
Entradas analógicas: Los canales ADC5, ADC4 y ADC6 que se observan en el
 esquema 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowSchematics"

\end_inset

.
\end_layout

\begin_layout Itemize
Serial: 
\end_layout

\begin_deeper
\begin_layout Itemize
Asíncrona/Síncrona: NO.
 Si bien el microcontrolador posee un módulo USART este está ocupado en
 la placa para comunicarse con el chip CP2104 que provee conversión UART
 a USB para conectarse con la PC o placa host (el microcontrolador no posee
 tiene interfaz USB).
\end_layout

\begin_layout Itemize
Sólo Síncrona: 
\end_layout

\begin_deeper
\begin_layout Itemize
SPI: NO.
 Si bien el microcontrolador provee SPI este está ocupado en la placa para
 con la pantalla TFT LCD.
\end_layout

\begin_layout Itemize
I
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

C: Los puertos PC4 y PC5 que se observan en 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowSchematics"

\end_inset

 se utilizan como pines SDA y SCL respectivamente.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
PWM: NO.
 Si bien el microcontrolador posee 6 canales PWM, los puertos PB3-PB1; PD6-PD5
 y PD3 que se observan en 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowSchematics"

\end_inset

, estos no se exponen en los 6 puertos de IO o estan conectados a la pantalla
 LCD, esto último también es visible en 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowSchematics"

\end_inset

 así como en el diagrama de bloques a continuación extraído de 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowHW"

\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Placas Proyecto - Imagenes/ODROIDSHOW_block.png
	width 50line%
	groupId imgs

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Herramientas de desarrollo
\end_layout

\begin_layout Standard
Dado que esta placa es un producto compatible con Arduino Leonardo es posible
 desarrollar en ella utilizando el Arduino IDE.
 Es posible desarrollar en C/C++ y compilar con avr-gcc.
 En el foro de ODROID, para este producto 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowForum"

\end_inset

, se puede encontrar bastante referencia con respecto a cómo interactuar
 con la placa y se proveen ejemplos en Python.
\end_layout

\begin_layout Subsubsection
Acceso al producto
\end_layout

\begin_layout Standard
Es posible comprar esta placa en la tienda de ODROID o en la tienda AmeriDroid
 a un precio de USD 25 
\begin_inset CommandInset citation
LatexCommand cite
key "ODROIDShowStore"

\end_inset

.
\end_layout

\begin_layout Subsection
Conclusiones
\end_layout

\begin_layout Standard
Comenzaremos las conclusiones presentando una tabla donde se muestra, para
 cada placa, si cumple o no con los requerimientos planteados en la introducción
 a este documento.
 Luego, haremos mención de aquellas placas que tengan alguna característica
 notable que valga destacar.
 Por último, se presenta una conclusión respecto de cuál es la placa que
 a nuestro juicio se debería usar en este proyecto.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Placa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cumple con los requisitos?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arduino Mega
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MBED LPC1768
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
USB IO BOARD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FRDM-K64F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LeoLivre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
USB4Butía
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ODROID-SHOW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NO
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Salvo las placas mbed, en general las vistas poseen características similares,
 diferenciándose sobre todo en aspectos que no parecen relevantes para este
 proyecto.
 A continuación se describen características que consideramos destacables
 de algunas de las placas.
\end_layout

\begin_layout Standard
Con respecto a la placa USB4Butiá se destaca el gran conocimiento acumulado
 del grupo MINA ya fué creada por miembros de dicho grupo y se le ha dado
 una gran variedad de usos en distintos proyectos.
 Igualmente tiene una notoria limitante en cuanto a su hardware, debido
 a una capacidad de procesamiento y de almacenamiento acotado.
\end_layout

\begin_layout Standard
La placa Leo Livre tiene características similares a la USB4Butiá y la Arduino
 Leonardo, y si bien la capacidad de su hardware no es de las mejores al
 compararla con otras (e.g.: mbed) puede ser una buena opción.
 Se destacan sus buenas capacidades de extensión ya que cuenta con un alto
 número de pines y varios conectores RJ45.
 La principal desventaja que encontramos es que, pese a tratarse de un proyecto
 de hardware libre, no parece tener una comunidad pujante detrás como para
 encontrar referencia y apoyo al utilizarla.
 Además, la información disponible sobre la misma es escasa.
\end_layout

\begin_layout Standard
Si bien la placa ODROID-SHOW no cumple con los requerimientos puede ser
 una adición interesante al proyecto, en la etapa de desarrollo para facilitar
 el debug haciendo que esta despliegue el estado de las placas (SBC y/o
 entrada/salida) y en etapas posteriores como herramienta para diagnóstico.
\end_layout

\begin_layout Standard
Las placas mbed claramente son las más potentes en cuanto a características
 de hardware, estando por encima del resto en capacidad de procesamiento,
 memoria y componentes de entrada/salida.
 Otras de las cosas que vale la pena mencionar son las facilidades de desarrollo
 que proporciona la compañía contando con herramientas para el desarrollo
 propiamente como también compartiendo información y brindando soporte mediante
 un sitio web para desarrolladores.
 Considerando las facilidades de acceso y en particular el precio, no existen
 mayores diferencias entre las características de las placas analizadas
 por lo que no es un factor determinante en la elección de la placa que
 resulta más conveniente para el desarrollo del proyecto.
 Finalmente, consideramos la placa mbed FRDM-K64F proporciona las mejores
 características de hardware y facilidades al desarrollo frente al resto
 de las placas analizadas.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Bibliografia"
options "unsrt"

\end_inset


\end_layout

\end_body
\end_document
